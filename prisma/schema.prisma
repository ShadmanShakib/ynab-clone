// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")


}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                          String    @id @default(cuid())
  name                        String?
  email                       String?   @unique
  emailVerified               DateTime?
  image                       String?
  password                    String?
  role                        UserRole @default(USER)
  accounts                    Account[]
  isTwoFactorEnabled          Boolean @default(false)
  twoFactorConfirmation       TwoFactorConfirmation?
  budgets                     Budget[]
  categories                  Category []
  bank_accounts               BankAccount []
  transactions                Transaction []
  is_first_login              Boolean @default(true)
}

// Bank account details

model BankAccount{
  id                String          @id @default(cuid())
  name              String
  cleared_balance   Float           @default(0)
  uncleared_balance Float           @default(0)
  working_balance   Float           @default(0)
  type              String
  note              String?      
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction []
  userId            String
}


model Budget {
  id        String      @id @default(cuid())
  name      String
  status    String?
  people    String [] @default([])
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  items     BudgetItem []
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id          String          @id @default(cuid())
  name        String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  budgetItems BudgetItem[]
}

model BudgetItem {
  id         String           @id @default(cuid())
  name       String
  group      String?
  value      String? 
  assigned   Float            @default(0)
  activity   Float            @default(0)
  available  Float            @default(0)
  target     Float?           @default(0)
  budget     Budget           @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category   Category         @relation(fields: [categoryId], references: [id])
  categoryId String
  budgetId   String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  transactions Transaction []
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Transaction {
  id           String                @id @default(cuid())
  user         User                  @relation(fields: [userId], references: [id])
  userId       String         
  amount       Float
  type         TransactionType
  date         DateTime              @default(now())
  description  String?
  budgetItem   BudgetItem            @relation(fields: [budgetItemId], references: [id])
  budgetItemId String
  account      BankAccount           @relation(fields: [accountId], references: [id])
  accountId    String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  
}



model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


enum TransactionType {
  INFLOW
  OUTFLOW
}