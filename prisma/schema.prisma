// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")


}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation           TwoFactorConfirmation?
  budgets   Budget[]
  is_first_login Boolean @default(true)
}

model Budget {
  id        String      @id @default(cuid())
  name      String
  status    String?
  people    String [] @default([])
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  items     Item []
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model Item {
  id         Int      @id @default(autoincrement())
  name       String
  group      String?
  value      String? 
  assigned   Float    @default(0)
  activity   Float    @default(0)
  available  Float
  budget     Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}